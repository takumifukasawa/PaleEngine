import {startActorBehaviourBase, StartActorFunc} from "@/PaleGL/actors/actorBehaviours.ts";
import {Actor, ActorStartArgs} from "@/PaleGL/actors/actor.ts";
import {createMaterial} from "@/PaleGL/materials/material.ts";
import {defaultDepthFragmentShader} from "@/PaleGL/core/buildShader.ts";
import {DepthFuncTypes} from "@/PaleGL/constants.ts";
import {Mesh} from "@/PaleGL/actors/mesh.ts";

export const startMesh: StartActorFunc = (actor: Actor, args: ActorStartArgs) => {
    // const {gpu} = options;

    startActorBehaviourBase(actor, args);

    const mesh = actor as Mesh;

    const { gpu } = args;

    mesh.geometry.start();

    // for debug
    // console.log(`[Mesh.start] materials length: ${this.materials.length}`);

    // 未コンパイルであればコンパイルする
    mesh.materials.forEach((material) => {
        // for debug
        // console.log(`[Mesh.start] material name: ${material.getName()}, isCompiledShader: ${material.isCompiledShader()}`);
        if (!material.isCompiledShader()) {
            material.start({
                gpu,
                attributeDescriptors: mesh.geometry.getAttributeDescriptors(),
            });
            // for debug
            // console.log(`[Mesh.start] material`, material, material.getShader());
        }
    });

    mesh.materials.forEach((material, i) => {
        if (!mesh.depthMaterials[i] && mesh.autoGenerateDepthMaterial) {
            // for debug
            // console.log(this.material, this.materials)
            // TODO: depth material から clone した方がいい気がする
            mesh.depthMaterials[i] = createMaterial({
                name: `${material.getName()}/depth`,
                // gpu,
                // vertexShader: this.mainMaterial.vertexShader,
                vertexShader: material.getRawVertexShader()!, // TDOO: rawじゃだめじゃん？
                fragmentShader: material.getDepthFragmentShader() || defaultDepthFragmentShader(),
                uniforms: material.getDepthUniforms().getData(), // TODO: deepcopyした方がよい？
                faceSide: material.getFaceSide(),
                depthTest: true,
                depthWrite: true,
                depthFuncType: DepthFuncTypes.Lequal,
                alphaTest: material.getAlphaTest(),
                skipDepthPrePass: !!material.getSkipDepthPrePass(),

                // TODO: 手動でいろいろ追加しなきゃなのが面倒
                isInstancing: material.getIsInstancing(),
                useInstanceLookDirection: material.getUseInstanceLookDirection(),
                useVertexColor: material.getUseVertexColor(),

                uniformBlockNames: material.getUniformBlockNames(), // TODO: 外側からも追加して渡せるほうがいいかもしれない
                // depthFuncType: this.mainMaterial.depthFuncType
            });
        }
    });

    mesh.depthMaterials.forEach((material) => {
        if (!material.isCompiledShader()) {
            material.start({
                gpu,
                attributeDescriptors: mesh.geometry.getAttributeDescriptors(),
            });
            // for debug
            // console.log(`[Mesh.start] depth`, material, material.getShader());
        }
    });

    // for debug
    // console.log("main raw vertex", this.mainMaterial.rawVertexShader)
    // console.log("main raw fragment", this.mainMaterial.rawFragmentShader)
    // console.log("depth raw vertex", this.depthMaterial.rawVertexShader)
};
