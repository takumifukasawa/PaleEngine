import {Actor} from "./Actor.ts";
import {ActorTypes, UniformTypes} from "./../constants.ts";
import {Material} from "../materials/Material.ts";
import {defaultDepthFragmentShader} from "../shaders/buildShader.ts";
import {Geometry} from "../geometries/Geometry.ts";

export class Mesh extends Actor {
    geometry: Geometry;
    // material;
    materials: Material[] = [];
    depthMaterial: Material | null;
    castShadow: boolean;
    instanced: boolean;
    autoGenerateDepthMaterial: boolean;

    get material() {
        if (this.hasMaterials) {
            console.warn("[Mesh.material getter] materials length > 1. material is head of materials.")
        }
        // return this.materials[0];
        return this.mainMaterial;
    }

    set material(material) {
        this.materials = [material];
    }

    get mainMaterial() {
        return this.materials[0];
    }

    get hasMaterials() {
        return this.materials.length > 1;
    }

    constructor({
                    geometry,
                    material,
                    materials,
                    depthMaterial = null,
                    // actorType,
                    castShadow = false,
                    instanced = false,
                    autoGenerateDepthMaterial = true
                }: {
        // required
        geometry: Geometry,
        material: Material,
        // optional
        materials?: Material[],
        depthMaterial?: Material | null,
        // actorType?: ActorTypes,
        castShadow?: boolean,
        instanced?: boolean,
        autoGenerateDepthMaterial?: boolean

    }) {
        super(ActorTypes.Mesh);
        this.geometry = geometry;
        // this.material = material;
        // TODO: check material is array
        this.materials = material !== null ? [material] : materials;
        this.depthMaterial = depthMaterial;
        this.castShadow = !!castShadow;
        this.instanced = !!instanced;
        this.autoGenerateDepthMaterial = autoGenerateDepthMaterial;
    }

    // TODO: args は { gpu } だけでいいかも
    start(options) {
        const {gpu} = options;

        super.start({gpu});

        this.geometry.start();

        // 未コンパイルであればコンパイルする
        this.materials.forEach(material => {
            if (!material.isCompiledShader) {
                material.start({
                    gpu,
                    attributeDescriptors: this.geometry.getAttributeDescriptors()
                });
            }
        });

        if (
            !this.depthMaterial &&
            this.autoGenerateDepthMaterial
        ) {
            this.depthMaterial = new Material({
                gpu,
                vertexShader: this.mainMaterial.vertexShader,
                fragmentShader: this.mainMaterial.depthFragmentShader || defaultDepthFragmentShader(),
                uniforms: this.mainMaterial.depthUniforms,
                faceSide: this.mainMaterial.faceSide
            });
        }

        if (this.depthMaterial && !this.depthMaterial.isCompiledShader) {
            this.depthMaterial.start({
                gpu,
                attributeDescriptors: this.geometry.getAttributeDescriptors()
            });
        }

        // for debug
        // console.log("main raw vertex", this.mainMaterial.rawVertexShader)
        // console.log("main raw fragment", this.mainMaterial.rawFragmentShader)
        // console.log("depth raw vertex", this.depthMaterial.rawVertexShader)
    }

    beforeRender({gpu}) {
        super.beforeRender({gpu});
        // this.materials.forEach(material => material.updateUniforms({ gpu }));
        // this.depthMaterial.updateUniforms({ gpu });
    }
}
